// Code generated by mockery v1.0.0
package directory

import (
	"time"

	"github.com/anothermemory/lib/pkg/unit"
	"github.com/stretchr/testify/mock"
)

// MockUnit is an autogenerated mock type for the Unit type
type MockUnit struct {
	mock.Mock
}

// Created provides a mock function with given fields:
func (m *MockUnit) Created() time.Time {
	ret := m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// ID provides a mock function with given fields:
func (m *MockUnit) ID() string {
	ret := m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MarshalJSON provides a mock function with given fields:
func (m *MockUnit) MarshalJSON() ([]byte, error) {
	ret := m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTitle provides a mock function with given fields: title
func (m *MockUnit) SetTitle(title string) {
	m.Called(title)
}

// Title provides a mock function with given fields:
func (m *MockUnit) Title() string {
	ret := m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Type provides a mock function with given fields:
func (m *MockUnit) Type() unit.Type {
	ret := m.Called()

	var r0 unit.Type
	if rf, ok := ret.Get(0).(func() unit.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(unit.Type)
	}

	return r0
}

// UnmarshalJSON provides a mock function with given fields: _a0
func (m *MockUnit) UnmarshalJSON(_a0 []byte) error {
	ret := m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Updated provides a mock function with given fields:
func (m *MockUnit) Updated() time.Time {
	ret := m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}
