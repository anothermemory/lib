// Code generated by mockery v1.0.0
package directory

import (
	"os"

	"github.com/anothermemory/lib/pkg/unit"
	"github.com/stretchr/testify/mock"
)

// mockPersistentUnitStorage is an autogenerated mock type for the persistentUnitStorage type
type mockPersistentUnitStorage struct {
	mock.Mock
}

// mkdirAll provides a mock function with given fields: path, perm
func (m *mockPersistentUnitStorage) mkdirAll(path string, perm os.FileMode) error {
	ret := m.Called(path, perm)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = rf(path, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// readFile provides a mock function with given fields: filename
func (m *mockPersistentUnitStorage) readFile(filename string) ([]byte, error) {
	ret := m.Called(filename)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// removeDir provides a mock function with given fields: name
func (m *mockPersistentUnitStorage) removeDir(name string) error {
	ret := m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// writeFile provides a mock function with given fields: filename, data, perm
func (m *mockPersistentUnitStorage) writeFile(filename string, data []byte, perm os.FileMode) error {
	ret := m.Called(filename, data, perm)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, os.FileMode) error); ok {
		r0 = rf(filename, data, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields:
func (m *mockPersistentUnitStorage) Create() error {
	ret := m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsCreated provides a mock function with given fields:
func (m *mockPersistentUnitStorage) IsCreated() bool {
	ret := m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LoadUnit provides a mock function with given fields: id
func (m *mockPersistentUnitStorage) LoadUnit(id string) (unit.Unit, error) {
	ret := m.Called(id)

	var r0 unit.Unit
	if rf, ok := ret.Get(0).(func(string) unit.Unit); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(unit.Unit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields:
func (m *mockPersistentUnitStorage) Remove() error {
	ret := m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUnit provides a mock function with given fields: u
func (m *mockPersistentUnitStorage) RemoveUnit(u unit.Unit) error {
	ret := m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(unit.Unit) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUnit provides a mock function with given fields: u
func (m *mockPersistentUnitStorage) SaveUnit(u unit.Unit) error {
	ret := m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(unit.Unit) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
